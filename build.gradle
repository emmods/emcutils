plugins {
  id "architectury-plugin" version "3.4.+"
  id "dev.architectury.loom" version "0.11.0.+" apply false
  id "com.modrinth.minotaur" version "2.+" apply false
  id "org.quiltmc.quilt-mappings-on-loom" version "4.+"
  id "io.github.juuxel.loom-quiltflower" version "1.+" apply false
}

architectury {
  minecraft = rootProject.mc_version
}

subprojects {
  apply plugin: "dev.architectury.loom"
  apply plugin: "com.modrinth.minotaur"

  repositories {
    mavenLocal()
    maven {
      url "https://api.modrinth.com/maven"
      content { includeGroup "maven.modrinth" }
    }
    maven {
      url "https://maven.terraformersmc.com"
      content { includeGroup "com.terraformersmc" }
    }
    maven {
      url "https://cursemaven.com"
      content { includeGroup "curse.maven" }
    }
    maven {
      url "https://maven.quiltmc.org/repository/release"
      content { includeGroup "org.quiltmc" }
    }
  }

  dependencies {
    minecraft "com.mojang:minecraft:${rootProject.mc_version}"
    mappings(loom.layered{it.addLayer(quiltMappings.mappings(
            "org.quiltmc:quilt-mappings:${rootProject.mc_version}+build.${rootProject.quilt_mappings}:v2"
    ))})

    if (project.name != "forge") {
      modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
      if (project.name != "common") processResources {
        inputs.property "version", rootProject.mod_version

        filesMatching("fabric.mod.json") {
          expand "version": rootProject.mod_version
        }
      }
    }

    implementation annotationProcessor("org.projectlombok:lombok:${rootProject.lombok_version}")

    // -Dmixin.debug.export=true
    runtimeOnly "org.quiltmc:quiltflower:1.8.0"
  }
}

allprojects {
  apply plugin: "java"
  apply plugin: "architectury-plugin"
  apply plugin: "maven-publish"

  group = "coffee.waffle.emcutils" // FIXME this is a hack, should use archiveBaseName
  archivesBaseName = "emcutils-${project.name}-${rootProject.mc_version}"
  version = rootProject.mod_version

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release.set(17)
  }

  java { withSourcesJar() }

  jar { from "LICENSE" }

  publishing {
    repositories {
      maven {
        url = System.getenv().MAVEN_URL
        credentials {
          username = System.getenv().MAVEN_USER
          password = System.getenv().MAVEN_PASS
        }
        authentication {
          //noinspection GroovyAssignabilityCheck
          basic(BasicAuthentication)
        }
      }
    }
  }
}