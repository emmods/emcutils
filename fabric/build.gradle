//file:noinspection GroovyAssignabilityCheck
plugins {
  id "com.github.johnrengelman.shadow" version "7.+"
}

architectury {
  platformSetupLoomIde()
  fabric()
}

repositories {
  maven {
    url "https://maven.terraformersmc.com"
    content { includeGroup "com.terraformersmc" }
  }
  maven {
    url "https://maven.waffle.coffee/releases"
    content {
      includeGroup "coffee.waffle"
      includeGroup "com.mamiyaotaru"
      includeGroup "xaero"
    }
  }
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common
}

dependencies {
  modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

  modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
    exclude group: "net.fabricmc.fabric-api"
    exclude group: "net.fabricmc"
  }

  modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}+${rootProject.mc_version_major}"

  modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") {
    exclude group: "net.fabricmc.fabric-api"
    exclude group: "net.fabricmc"
  }

  modApi "com.mamiyaotaru:voxelmap:${rootProject.voxel_version}+${rootProject.mc_version_major}"
  modCompileOnly "xaero:minimap:${rootProject.xmm_version}+${rootProject.mc_version_major}"
  modCompileOnly "xaero:map:${rootProject.xwm_version}+${rootProject.mc_version_major}"

  modRuntimeOnly("coffee.waffle:clean-logs:1.0.1") {
    exclude group: "net.fabricmc.fabric-api"
    exclude group: "net.fabricmc"
    exclude group: "com.terraformersmc"
  }

  common(project(path: ":common", configuration: "namedElements")) { transitive false }
  shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
  inputs.property "version", rootProject.mod_version

  filesMatching("fabric.mod.json") {
    expand "version": rootProject.mod_version
  }
}

shadowJar {
  configurations = [project.configurations.shadowCommon]
  classifier "dev-shadow"
}

remapJar {
  input.set shadowJar.archiveFile
  dependsOn shadowJar
  classifier null
}

jar {
  classifier "dev"
}

sourcesJar {
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}

publishing {
  publications {
    mavenJavaFabric(MavenPublication) {
      groupId = 'coffee.waffle'
      artifactId = rootProject.archivesBaseName + "-" + project.name
      version = rootProject.mod_version + "+" + rootProject.mc_version + System.getenv().SNAPSHOT

      from components.java
    }
  }
  repositories {
    maven {
      url = System.getenv().MAVEN_URL
      credentials {
        username = System.getenv().MAVEN_USER
        password = System.getenv().MAVEN_PASS
      }
      authentication { basic(BasicAuthentication) }
    }
  }
}