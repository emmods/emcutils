//file:noinspection GroovyAssignabilityCheck
plugins {
  id "com.github.johnrengelman.shadow" version "7.+"
}

architectury {
  platformSetupLoomIde()
  fabric()
}

repositories {
  maven {
    url "https://maven.terraformersmc.com"
    content { includeGroup "com.terraformersmc" }
  }
  maven {
    url "https://cursemaven.com"
    content { includeGroup "curse.maven" }
  }
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common
}

dependencies {
  modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

  modImplementation include("maven.modrinth:midnightlib:${rootProject.midnightlib_version}")

  modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
    exclude group: "net.fabricmc.fabric-api"
    exclude group: "net.fabricmc"
  }

  modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

  modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") {
    exclude group: "net.fabricmc.fabric-api"
    exclude group: "net.fabricmc"
  }

  modImplementation files("voxelmap-1.18.1-1.10.20.jar")
  modCompileOnly "curse.maven:xmm-263420:${rootProject.xmm_version}"
  modCompileOnly "curse.maven:xwm-317780:${rootProject.xwm_version}"

  modRuntimeOnly "maven.modrinth:lazydfu:0.1.2"

  common(project(path: ":common", configuration: "namedElements")) { transitive false }
  shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
  inputs.property "version", rootProject.mod_version

  filesMatching("fabric.mod.json") {
    expand "version": rootProject.mod_version
  }
}

shadowJar {
  configurations = [project.configurations.shadowCommon]
  classifier "dev-shadow"
}

remapJar {
  inputFile.set shadowJar.archiveFile
  dependsOn shadowJar
  classifier null
}

jar {
  classifier "dev"
}

sourcesJar {
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}

publishing {
  publications {
    mavenJavaFabric(MavenPublication) {
      from components.java
    }
  }
}