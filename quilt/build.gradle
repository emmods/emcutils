//file:noinspection GroovyAssignabilityCheck
plugins {
  alias(libs.plugins.minotaur)
  alias(libs.plugins.shadow)
  alias(libs.plugins.loom.quiltflower)
}

apply from: "../gradle/loader.gradle"
apply from: "../gradle/qmj.gradle"

architectury.loader("quilt")

var commonAW = project(":common").file("src/main/resources/emcutils.accesswidener")
var generatedResources = file("src/generated/resources")

loom.accessWidenerPath.set(commonAW)

configurations {
  developmentQuilt.extendsFrom common
}

dependencies {
  modImplementation libs.quilt.loader
  modImplementation libs.quilted.fabric.api

  modImplementation libs.midnightlib
  include libs.midnightlib

  modRuntimeOnly(libs.bundles.fabric.runtime) { transitive false }

  include project(":journey")
  include project(":voxel")
  include project(":xaero")

  shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

sourceSets {
  main {
    resources {
      srcDir generatedResources
    }
  }
}

task copyAW(type: Copy) {
  from commonAW
  into generatedResources
}

processResources.dependsOn copyAW

import com.modrinth.minotaur.dependencies.ModDependency
modrinth {
  dependencies = [
          new ModDependency("qvIfYCYJ", "required"), // QFAPI
          new ModDependency("codAaoxh", "required"), // MidnightLib
          new ModDependency("mOgUt4GM", "optional"), // Mod Menu
  ]
  syncBodyFrom = rootProject.file("README.md").text
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

publishing.publications {
  mavenQuilt(MavenPublication) from components.java
}